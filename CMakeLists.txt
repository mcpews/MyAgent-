cmake_minimum_required(VERSION 3.12)
project(MyAgent)

unset(CMAKE_C_COMPILER CACHE)
unset(CMAKE_CXX_COMPILER CACHE)
option(WIN32 "Build win32 version (Cross-Platform)" OFF)
option(Android "Cross-arch build executable for android" OFF)

if(WIN32)
	SET(CMAKE_SYSTEM_NAME Windows)
	set(CMAKE_C_COMPILER /usr/bin/i686-w64-mingw32-gcc)
	set(CMAKE_CXX_COMPILER /usr/bin/i686-w64-mingw32-g++)
	set(CMAKE_RC_COMPILER /usr/bin/i686-w64-mingw32-windres)
	set(CMAKE_RC_COMPILE_OBJECT "-I/usr/i686-w64-mingw32/include")
	set(CMAKE_LINKER_FLAGS "-static")
	set(CMAKE_EXE_LINKER_FLAGS "-static -Wl,--subsystem,console")
	set(CMAKE_CXX_FLAGS "-mwindows -w -s -m32 -march=i486 -std=c++17 -static")
	set(CMAKE_C_FLAGS "-mwindows -w -s -m32 -march=i486 -static")
	add_subdirectory(mingw-std-threads)
endif(WIN32)
set(CMAKE_CXX_STANDARD 17)
if(Android)
	set(ANDROID_ABI arm64-v8a)
	set(ANDROID_STL c++_static)
	set(ANDROID_PLATFORM 21)
	set(CMAKE_BUILD_TYPE Release)
	include(/home/user/android-ndk-r20b/build/cmake/android.toolchain.cmake)
	set(CMAKE_CXX_FLAGS "-w")
	#set(CMAKE_SYSTEM_PROCESSOR aarch64)
	set(CMAKE_C_COMPILER /home/user/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang)
	set(CMAKE_CXX_COMPILER /home/user/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++)
	set(CMAKE_EXE_LINKER_FLAGS "-static")
	add_definitions(-DAndroid -Dz_size_t=size_t)
endif()

set(JSONCPP_WITH_TESTS OFF)

add_subdirectory(jsoncpp-1.8.4)
add_subdirectory(zlib)
add_subdirectory(libuv)

add_definitions(-DLIBUS_NO_SSL)

include_directories(include midifile/include uWS uSockets/src zlib libuv/include)
if(WIN32)
	include_directories(mingw-std-threads)
endif(WIN32)
AUX_SOURCE_DIRECTORY(core SRCL)
AUX_SOURCE_DIRECTORY(uSockets/src uSRC)
AUX_SOURCE_DIRECTORY(uSockets/src/crypto uSRCc)
AUX_SOURCE_DIRECTORY(uSockets/src/eventing uSRCe)

if(WIN32)
	set(ADDE ws2_32)
elseif(Android)
	set(ADDE )
else()
	set(ADDE pthread)
endif(WIN32)

add_executable(MyAgent main.cpp ${SRCL} ${uSRC} ${uSRCc} ${uSRCe})
target_link_libraries(MyAgent jsoncpp_lib_static zlibstatic ${ADDE} uv_a readline ${Boost_LIBRARIES})
